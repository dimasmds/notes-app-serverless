service:
  name: serverless-notes-app

variablesResolutionMode: 20210326

plugins:
  - serverless-esbuild
  - serverless-iam-roles-per-function
  - serverless-dynamodb-local
  - serverless-offline

custom:
  dynamodb:
    stages:
      - ${self:provider.stage}
    start:
      port: 8000
      inMemory: true
      migrate: true

  serverless-offline:
    port: 3003
    httpPort: 3001

provider:
  name: aws
  runtime: nodejs14.x

  tracing:
    apiGateway: true
    lambda: true

  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'ap-southeast-1'}

  environment:
    USERS_TABLE: Users-${self:provider.stage}
    USERS_BY_USERNAME_INDEX: UsersByUsernameIndex
    NOTES_TABLE: Notes-${self:provider.stage}
    NOTES_BY_USER_INDEX: NotesByUserIndex
    SECRET_ID: NotesAppSecret-${self:provider.stage}
    ACCESS_TOKEN_SECRET_FIELD: accessTokenSecretField
    ATTACHMENTS_BUCKET_NAME: dmds-notes-app-attachments-${self:provider.stage}
    SIGNED_URL_EXPIRATION: 300


functions:

  CreateUser:
    handler: src/Interfaces/lambda/http/createUser.handler
    timeout: 30
    events:
      - http:
          path: /users
          method: post
          cors: true
          request:
            schema:
              application/json: ${file(src/Interfaces/lambda/http/models/create-user-request.json)}
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:PutItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.USERS_TABLE}
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.USERS_TABLE}/index/${self:provider.environment.USERS_BY_USERNAME_INDEX}

resources:
  Resources:

    GatewayResponseDefault4XX:
      Type: AWS::ApiGateway::GatewayResponse
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
          gatewayresponse.header.Access-Control-Allow-Methods: "'GET,OPTIONS,POST'"
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: ApiGatewayRestApi


    UsersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: username
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.USERS_TABLE}
        GlobalSecondaryIndexes:
          - IndexName: ${self:provider.environment.USERS_BY_USERNAME_INDEX}
            KeySchema:
              - AttributeName: username
                KeyType: HASH
            Projection:
              ProjectionType: ALL
