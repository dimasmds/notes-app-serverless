service: serverless-notes-app

variablesResolutionMode: 20210326

plugins:
  - serverless-esbuild
  - serverless-iam-roles-per-function
  - serverless-dynamodb-local
  - serverless-offline

custom:
  dynamodb:
    stages:
      - ${self:provider.stage}
    start:
      port: 8000
      inMemory: true
      migrate: true

  serverless-offline:
    port: 3003
    httpPort: 3001

provider:
  name: aws
  runtime: nodejs14.x
  lambdaHashingVersion: 20201221
  tracing:
    apiGateway: true
    lambda: true
  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'ap-southeast-1'}
  environment:
    USERS_TABLE: Users-${self:provider.stage}
    USERS_BY_USERNAME_INDEX: UsersByUsernameIndex
    NOTES_TABLE: Notes-${self:provider.stage}
    NOTES_BY_USER_ID_INDEX: NotesByUserIdIndex
    TOKEN_JWT_SECRET_NAME: NotesAppSecret-${self:provider.stage}
    TOKEN_JWT_SECRET_FIELD: accessTokenSecretField
    TOKEN_JWT_EXPIRES_TIME: 50000
    ATTACHMENTS_BUCKET_NAME: dimasmds-ddc-notes-app-attachments-${self:provider.stage}
    SIGNED_URL_EXPIRATION: 300


functions:
  Auth:
    handler: src/Interfaces/lambda/http/authentication.handler
    iamRoleStatements:
      - Effect: Allow
        Action:
          - secretsmanager:GetSecretValue
        Resource: !Ref NotesAppSecret
      - Effect: Allow
        Action:
          - kms:Decrypt
        Resource: !GetAtt KMSKey.Arn

  CreateUser:
    handler: src/Interfaces/lambda/http/createUser.handler
    timeout: 30
    events:
      - http:
          path: /users
          method: post
          cors: true
          request:
            schemas:
              application/json: ${file(src/Interfaces/lambda/http/models/create-user-request.json)}
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:PutItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.USERS_TABLE}
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.USERS_TABLE}/index/${self:provider.environment.USERS_BY_USERNAME_INDEX}
      - Effect: Allow
        Action:
          - xray:GetSamplingRules
          - xray:GetSamplingTargets
          - xray:GetSamplingStatisticSummaries
          - xray:BatchGetTraces
          - xray:GetServiceGraph
          - xray:GetTraceGraph
          - xray:GetTraceSummaries
          - xray:GetGroups
          - xray:GetGroup
          - xray:PutTraceSegments
        Resource:
          - "*"

  LoginUser:
    handler: src/Interfaces/lambda/http/loginUser.handler
    timeout: 30
    events:
      - http:
          path: /login
          method: post
          cors: true
          request:
            schemas:
              application/json: ${file(src/Interfaces/lambda/http/models/login-user-request.json)}
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:GetItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.USERS_TABLE}
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.USERS_TABLE}/index/${self:provider.environment.USERS_BY_USERNAME_INDEX}
      - Effect: Allow
        Action:
          - xray:GetSamplingRules
          - xray:GetSamplingTargets
          - xray:GetSamplingStatisticSummaries
          - xray:BatchGetTraces
          - xray:GetServiceGraph
          - xray:GetTraceGraph
          - xray:GetTraceSummaries
          - xray:GetGroups
          - xray:GetGroup
          - xray:PutTraceSegments
        Resource:
          - "*"
      - Effect: Allow
        Action:
          - secretsmanager:GetSecretValue
        Resource: !Ref NotesAppSecret
      - Effect: Allow
        Action:
          - kms:Decrypt
        Resource: !GetAtt KMSKey.Arn

  CreateNote:
    handler: src/Interfaces/lambda/http/createNote.handler
    events:
      - http:
          path: /notes
          method: post
          cors: true
          authorizer: Auth
          request:
            schemas:
              application/json: ${file(src/Interfaces/lambda/http/models/create-note-request.json)}
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:PutItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.NOTES_TABLE}
      - Effect: Allow
        Action:
          - xray:GetSamplingRules
          - xray:GetSamplingTargets
          - xray:GetSamplingStatisticSummaries
          - xray:BatchGetTraces
          - xray:GetServiceGraph
          - xray:GetTraceGraph
          - xray:GetTraceSummaries
          - xray:GetGroups
          - xray:GetGroup
          - xray:PutTraceSegments
        Resource:
          - "*"

  GetNotes:
    handler: src/Interfaces/lambda/http/getNotes.handler
    events:
      - http:
          path: /notes
          method: get
          cors: true
          authorizer: Auth
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.NOTES_TABLE}/index/${self:provider.environment.NOTES_BY_USER_ID_INDEX}
      - Effect: Allow
        Action:
          - xray:GetSamplingRules
          - xray:GetSamplingTargets
          - xray:GetSamplingStatisticSummaries
          - xray:BatchGetTraces
          - xray:GetServiceGraph
          - xray:GetTraceGraph
          - xray:GetTraceSummaries
          - xray:GetGroups
          - xray:GetGroup
          - xray:PutTraceSegments
        Resource:
          - "*"

  GetArchivedNotes:
    handler: src/Interfaces/lambda/http/getArchivedNotes.handler
    events:
      - http:
          path: /archives
          method: get
          cors: true
          authorizer: Auth
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.NOTES_TABLE}/index/${self:provider.environment.NOTES_BY_USER_ID_INDEX}
      - Effect: Allow
        Action:
          - xray:GetSamplingRules
          - xray:GetSamplingTargets
          - xray:GetSamplingStatisticSummaries
          - xray:BatchGetTraces
          - xray:GetServiceGraph
          - xray:GetTraceGraph
          - xray:GetTraceSummaries
          - xray:GetGroups
          - xray:GetGroup
          - xray:PutTraceSegments
        Resource:
          - "*"

  GetNote:
    handler: src/Interfaces/lambda/http/getNote.handler
    events:
      - http:
          path: /notes/{id}
          method: get
          cors: true
          authorizer: Auth
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.NOTES_TABLE}
      - Effect: Allow
        Action:
          - xray:GetSamplingRules
          - xray:GetSamplingTargets
          - xray:GetSamplingStatisticSummaries
          - xray:BatchGetTraces
          - xray:GetServiceGraph
          - xray:GetTraceGraph
          - xray:GetTraceSummaries
          - xray:GetGroups
          - xray:GetGroup
          - xray:PutTraceSegments
        Resource:
          - "*"

  UpdateNote:
    handler: src/Interfaces/lambda/http/updateNote.handler
    events:
      - http:
          path: /notes/{id}
          method: put
          cors: true
          authorizer: Auth
          request:
            schemas:
              application/json: ${file(src/Interfaces/lambda/http/models/update-note-request.json)}
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:UpdateItem
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.NOTES_TABLE}
      - Effect: Allow
        Action:
          - xray:GetSamplingRules
          - xray:GetSamplingTargets
          - xray:GetSamplingStatisticSummaries
          - xray:BatchGetTraces
          - xray:GetServiceGraph
          - xray:GetTraceGraph
          - xray:GetTraceSummaries
          - xray:GetGroups
          - xray:GetGroup
          - xray:PutTraceSegments
        Resource:
          - "*"

  DeleteNote:
    handler: src/Interfaces/lambda/http/deleteNote.handler
    events:
      - http:
          path: /notes/{id}
          method: delete
          cors: true
          authorizer: Auth
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:DeleteItem
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.NOTES_TABLE}
      - Effect: Allow
        Action:
          - xray:GetSamplingRules
          - xray:GetSamplingTargets
          - xray:GetSamplingStatisticSummaries
          - xray:BatchGetTraces
          - xray:GetServiceGraph
          - xray:GetTraceGraph
          - xray:GetTraceSummaries
          - xray:GetGroups
          - xray:GetGroup
          - xray:PutTraceSegments
        Resource:
          - "*"

  UpdateAttachment:
    handler: src/Interfaces/lambda/http/updateAttachment.handler
    events:
      - http:
          path: /notes/{id}/attachments
          method: put
          cors: true
          authorizer: Auth
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:UpdateItem
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.NOTES_TABLE}
      - Effect: Allow
        Action:
          - s3:PutObject
        Resource: arn:aws:s3:::${self:provider.environment.ATTACHMENTS_BUCKET_NAME}/*
      - Effect: Allow
        Action:
          - xray:GetSamplingRules
          - xray:GetSamplingTargets
          - xray:GetSamplingStatisticSummaries
          - xray:BatchGetTraces
          - xray:GetServiceGraph
          - xray:GetTraceGraph
          - xray:GetTraceSummaries
          - xray:GetGroups
          - xray:GetGroup
          - xray:PutTraceSegments
        Resource:
          - "*"


resources:
  Resources:

    GatewayResponseDefault4XX:
      Type: AWS::ApiGateway::GatewayResponse
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
          gatewayresponse.header.Access-Control-Allow-Methods: "'GET,OPTIONS,POST'"
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: ApiGatewayRestApi


    UsersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: username
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.USERS_TABLE}
        GlobalSecondaryIndexes:
          - IndexName: ${self:provider.environment.USERS_BY_USERNAME_INDEX}
            KeySchema:
              - AttributeName: username
                KeyType: HASH
            Projection:
              ProjectionType: ALL

    NotesTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: userId
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.NOTES_TABLE}
        GlobalSecondaryIndexes:
          - IndexName: ${self:provider.environment.NOTES_BY_USER_ID_INDEX}
            KeySchema:
              - AttributeName: userId
                KeyType: HASH
            Projection:
              ProjectionType: ALL

    KMSKey:
      Type: AWS::KMS::Key
      Properties:
        Description: KMS key to encrypt secret
        KeyPolicy:
          Version: '2012-10-17'
          Id: key-default-1
          Statement:
            - Sid: Allow administration of the key
              Effect: Allow
              Principal:
                AWS:
                  Fn::Join:
                    - ':'
                    - - 'arn:aws:iam:'
                      - Ref: AWS::AccountId
                      - 'root'
              Action:
                - 'kms:*'
              Resource: '*'

    KMSKeyAlias:
      Type: AWS::KMS::Alias
      Properties:
        AliasName: alias/notesAppKey-${self:provider.stage}
        TargetKeyId: !Ref KMSKey

    NotesAppSecret:
      Type: AWS::SecretsManager::Secret
      Properties:
        Name: ${self:provider.environment.TOKEN_JWT_SECRET_NAME}
        Description: Notes App secret
        KmsKeyId: !Ref KMSKey

    AttachmentsBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:provider.environment.ATTACHMENTS_BUCKET_NAME}
        CorsConfiguration:
          CorsRules:
            - AllowedOrigins:
                - '*'
              AllowedHeaders:
                - '*'
              AllowedMethods:
                - GET
                - PUT
                - POST
                - DELETE
                - HEAD
              MaxAge: 3000

    BucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        PolicyDocument:
          Id: MyPolicy
          Version: "2012-10-17"
          Statement:
            - Sid: PublicReadForGetBucketObjects
              Effect: Allow
              Principal: '*'
              Action: 's3:GetObject'
              Resource: 'arn:aws:s3:::${self:provider.environment.ATTACHMENTS_BUCKET_NAME}/*'
        Bucket: !Ref AttachmentsBucket
